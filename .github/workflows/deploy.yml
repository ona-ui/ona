name: Deploy to VPS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: VPS-ONA

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rolling Deploy to VPS
        uses: appleboy/ssh-action@v1.2.2
        with:
          host:     ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key:      ${{ secrets.VPS_SSH_KEY }}
          script: |
            #!/bin/bash
            set -e
            
            echo "üöÄ D√©but du d√©ploiement rolling..."
            
            cd /var/www/ona
            
            # R√©cup√©rer les derni√®res modifications
            echo "üì• R√©cup√©ration des modifications..."
            sudo git pull origin main
            
            # Fonction pour attendre qu'un service soit healthy
            wait_for_healthy() {
              service=$1
              max_attempts=12
              attempt=1

              echo "‚è≥ Attente que $service soit healthy..."

              while [ $attempt -le $max_attempts ]; do
                # V√©rifier le health status avec docker compose ps
                health_output=$(sudo docker compose ps $service 2>/dev/null || echo "")
                
                if echo "$health_output" | grep -q "(healthy)"; then
                  echo "‚úÖ $service est healthy (tentative $attempt/$max_attempts)"
                  return 0
                elif echo "$health_output" | grep -q "(unhealthy)"; then
                  echo "‚ùå $service est unhealthy"
                  sudo docker compose logs --tail=10 $service
                  return 1
                fi

                echo "üîÑ Tentative $attempt/$max_attempts - $service: en cours de v√©rification..."
                sleep 10
                attempt=$((attempt + 1))
              done

              echo "‚ùå $service n'est pas healthy apr√®s $max_attempts tentatives"
              sudo docker compose logs --tail=10 $service
              return 1
            }


            
            # Fonction pour d√©ployer un service avec rolling update
            deploy_service() {
              local service=$1
              echo "üîß D√©ploiement rolling de $service..."
              
              # Construire la nouvelle image
              echo "üèóÔ∏è Construction de la nouvelle image $service..."
              sudo docker compose build --no-cache $service
              
              # Cr√©er un nouveau conteneur temporaire
              echo "üöÄ D√©marrage du nouveau $service..."
              sudo docker compose up -d --no-deps --scale $service=2 $service
              
              # Attendre que le nouveau service soit healthy
              echo "‚è≥ Attente que le nouveau $service soit pr√™t..."
              sleep 30
              
              if ! wait_for_healthy "$service"; then
                echo "‚ùå Rollback de $service..."
                sudo docker compose up -d --no-deps --scale $service=1 $service
                return 1
              fi
              
              # Remplacer l'ancien conteneur
              echo "üîÑ Remplacement de l'ancien $service..."
              sudo docker compose up -d --no-deps --scale $service=1 $service
              
              # V√©rification finale
              sleep 10
              if ! wait_for_healthy "$service"; then
                echo "‚ùå Le $service n'est pas stable apr√®s remplacement"
                return 1
              fi
              
              echo "‚úÖ $service d√©ploy√© avec succ√®s"
              return 0
            }
            
            # D√©ploiement du backend
            if ! deploy_service "backend"; then
              echo "‚ùå √âchec du d√©ploiement du backend"
              exit 1
            fi
            
            # Attendre avant le frontend
            sleep 15
            
            # D√©ploiement du frontend
            if ! deploy_service "frontend"; then
              echo "‚ùå √âchec du d√©ploiement du frontend"
              exit 1
            fi
            
            # Attendre avant l'admin
            sleep 15
            
            # D√©ploiement de l'admin
            if ! deploy_service "admin"; then
              echo "‚ùå √âchec du d√©ploiement de l'admin"
              exit 1
            fi
            
            # Nettoyage
            echo "üßπ Nettoyage des images inutilis√©es..."
            sudo docker system prune -f
            
            # Statut final
            echo "üìä Statut final des services:"
            sudo docker compose ps
            
            echo "üéâ D√©ploiement rolling termin√© avec succ√®s !"
